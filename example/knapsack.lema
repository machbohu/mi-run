// Example program for LeMaVM solving knapsack problem with heuristic
// file with instances: id, itemsCnt, capacity, weight, price, weight, price, ...

class Item{
    private int weight;
    private int price;
    private boolean isSolution;
    
    public Item(int w, int p){
        weight = w;
        price = p;
    }
    
    public int getWeight(){
        return weight;
    }
    
    public int getPrice(){
        return price;
    }
    
    public void setAsSolution(){
        isSolution = true;
    }
    
    public boolean isSolution(){
        return isSolution;
    }
    
    public int compare(Item other){
        int comp1 = price/weight;
        int comp2 = other.getPrice()/other.getWeight();
        
        if(comp1 < comp2){
            return -1;
        }
        if(comp1 == comp2){
            return 0;
        }
        if(comp1 > comp2){
            return 1;
        }
    }
    
    public static void sort(Item[] items){
        for(int ii = 1;ii < items.getLength();ii++) {
            for(int jj = items.getLength()-1; jj >= ii;jj--) {
                Item other = items[jj-1];
                if(items[jj].compare(other) == 1) {
                    Item tmp = items[jj-1];
                    items[jj-1] = items[jj];
                    items[jj] = tmp;
                }
            }
        }
    }
}

class Main{
    public static void main(string[] args){
        File f = new File(args[0]);
        
        if(!f.doesFileExist()){
            System.errorln("Input file does not exists.");
        }
        
        string line = f.readLine();
        int id = line.toInt();
        
        line = f.readLine();
        int itemsCnt = line.toInt();
        
        line = f.readLine();
        int capacity = line.toInt();
        
        Item[] items = new Item[itemsCnt];
        int weight = 0, price = 0;
        
        for(int ii=0;ii<itemsCnt;ii++){
            line = f.readLine();
            weight = line.toInt();
            line = f.readLine();
            price = line.toInt();
            items[ii] = new Item(weight, price);
        }
        
        Item.sort(items);
        
        weight = 0;
        price = 0;
        
        for(int ii=0;ii<itemsCnt;ii++){
            if((weight + items[ii].getWeight()) <= capacity){
                weight = weight + items[ii].getWeight();
                price = price + items[ii].getPrice();
                items[ii].setAsSolution();
            }
        }
        
        string solution = id + " " + weight + " " + price;
        
        for(int ii=0;ii<itemsCnt;ii++){
            if(items[ii].isSolution()){
                solution = solution + " 1";
            }else{
                solution = solution + " 0";
            }
        }
        
        f.close();
        
        System.println(solution);
        
        f = new File(args[1]);
        f.createFile();
        
        if(f.canWrite()){
            f.writeLine(solution);
        }else{
            System.errorln("Output file is not writable.");
        }
        
        f.close();
    }
}